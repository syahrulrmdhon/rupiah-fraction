{"version":3,"sources":["components/FormComponent.js","App.js","serviceWorker.js","index.js"],"names":["FormComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fraction","arrRe","money","handleChange","bind","assertThisInitialized","handleSubmit","_this$state","index","findIndex","number","some","el","push","solution","e","setState","target","value","preventDefault","inputMoney","indexOf","substr","lastIndexOf","replace","arrSolution","prevState","counts","forEach","i","entries","reverse","map","_ref","_ref2","slicedToArray","key","react_default","a","createElement","className","style","marginTop","onSubmit","type","onChange","placeholder","marginLeft","renderObject","Component","App","Fragment","FormComponent_FormComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAEqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAU,CACR,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IAEFC,MAAO,GACPC,MAAO,IAETV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IACpBA,EAAKc,aAAed,EAAKc,aAAaF,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IApBLA,wEAuBVU,GAAO,IAAAK,EACYZ,KAAKI,MAAzBC,EADQO,EACRP,SAAUC,EADFM,EACEN,MACZO,EAAQR,EAASS,UAAU,SAASC,GACtC,OAAOR,GAASQ,IAElB,OAAGV,EAASW,KAAK,SAAAC,GAAE,OAAIA,EAAKV,KAC1BA,GAAgBF,EAASQ,GACzBP,EAAMY,KAAKb,EAASQ,IACbb,KAAKmB,SAASZ,EAAMM,KAEvBN,EAAQ,GACVD,EAAMY,KAAKX,GAEND,wCAIEc,GACXpB,KAAKqB,SAAS,CAACd,MAAOa,EAAEE,OAAOC,MAAOjB,MAAO,0CAGlCc,GACXA,EAAEI,iBADY,IAGVC,EADElB,EAAUP,KAAKI,MAAfG,MAEFA,EAAMmB,QAAQ,MAAQ,EAExBD,EADqBlB,EAAMoB,OAAO,EAAGpB,EAAMqB,YAAY,MAC3BC,QAAQ,UAAU,IAE9CJ,EAAalB,EAAMsB,QAAQ,UAAU,IAEvC,IAAIC,EAAc9B,KAAKmB,SAASM,GAChCzB,KAAKqB,SAAS,SAAAU,GAAS,MAAK,CAC1BzB,MAAOwB,KAET9B,KAAKqB,SAAS,CACZd,MAAO,4CAKT,IAAIyB,EAAS,GAKb,OAJAhC,KAAKI,MAAME,MAAM2B,QAAQ,SAASC,GAChCF,EAAOE,IAAMF,EAAOE,IAAM,GAAK,IAG1BpC,OAAOqC,QAAQH,GAAQI,UAAUC,IAAI,SAAAC,EAAeJ,GAAM,IAAAK,EAAAzC,OAAA0C,EAAA,EAAA1C,CAAAwC,EAAA,GAAnBG,EAAmBF,EAAA,GAAdhB,EAAcgB,EAAA,GAClE,OACCG,EAAAC,EAAAC,cAAA,MAAIH,IAAKP,GAAIX,EAAb,QAAyBkB,sCAOzB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,MAAO,CAACC,UAAW,SAC5CL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,mBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qCAAqCG,SAAUhD,KAAKW,cAChE+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,WAAjB,SACAH,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOJ,UAAU,eAAeK,SAAUlD,KAAKQ,aAAc2C,YAAY,SAEzFT,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASJ,UAAU,uBAAuBC,MAAO,CAACM,WAAY,SAA3E,WAEJV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,MAAO,CAACC,UAAW,SAE3C/C,KAAKqD,wBA3FyBC,aCU5BC,MARf,WACE,OACEb,EAAAC,EAAAC,cAACF,EAAAC,EAAMa,SAAP,KACEd,EAAAC,EAAAC,cAACa,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f91fcf08.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class FormComponent extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        fraction: [\r\n          100000,\r\n          50000,\r\n          20000,\r\n          10000,\r\n          5000,\r\n          2000,\r\n          1000,\r\n          500,\r\n          200,\r\n          100,\r\n          50\r\n        ],\r\n        arrRe: [],\r\n        money: '',\r\n      }\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  solution(money) {\r\n    let { fraction, arrRe } = this.state;\r\n    let index = fraction.findIndex(function(number) {\r\n      return money >= number;\r\n    });\r\n    if(fraction.some(el => el < money)) {\r\n      money = money - fraction[index];\r\n      arrRe.push(fraction[index]);\r\n      return this.solution(money,index);\r\n    } else {\r\n      if (money > 0) {\r\n        arrRe.push(money);\r\n      }\r\n      return arrRe;\r\n    } \r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({money: e.target.value, arrRe: []});\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault(); \r\n    let { money } = this.state;\r\n    let inputMoney;\r\n    if( money.indexOf(',') > -1) {\r\n      let replaceCommmas = money.substr(0, money.lastIndexOf(\",\"));\r\n      inputMoney = replaceCommmas.replace(/[^0-9]/g,'');\r\n    } else {\r\n      inputMoney = money.replace(/[^0-9]/g,'');\r\n    }\r\n    let arrSolution = this.solution(inputMoney);\r\n    this.setState(prevState => ({\r\n      arrRe: arrSolution\r\n    }))\r\n    this.setState({\r\n      money: ''\r\n    })\r\n  }\r\n\r\n  renderObject(){\r\n    let counts = {};\r\n    this.state.arrRe.forEach(function(i) {\r\n      counts[i] = (counts[i] || 0) + 1 ;\r\n    })\r\n    \r\n    return Object.entries(counts).reverse().map(([key, value], i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<li key={i}>{value} x Rp{key}</li>\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" style={{marginTop: '20vh'}}>\r\n        <h1 className=\"text-center\">Rupiah Fraction</h1>\r\n        <form className=\"form-inline justify-content-center\" onSubmit={this.handleSubmit}>\r\n            <div className=\"form-group mb-2\">\r\n                <label className=\"sr-only\">Email</label>\r\n                <input type=\"text\" className=\"form-control\" onChange={this.handleChange} placeholder=\"Rp.\" />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary mb-2\" style={{marginLeft: '1rem'}}>Submit</button>\r\n        </form>\r\n        <div className=\"text-center\" style={{marginTop: '2rem'}}>\r\n          {\r\n             this.renderObject()\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport FormComponent from './components/FormComponent';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <FormComponent/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}